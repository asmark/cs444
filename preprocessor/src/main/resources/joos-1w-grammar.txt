# Start symbol
CompilationUnit

Literal:
  integerliteral
  floatingpointliteral
  booleanliteral
  characterliteral
  stringliteral
  nullliteral
IntegerLiteral:
  decimalintegerliteral
  hexintegerliteral
  octalintegerliteral

BooleanLiteral:
  true
  false

Type:
  PrimitiveType
  ReferenceType
PrimitiveType:
  NumericType
  boolean
NumericType:
  IntegralType
  FloatingPointType
IntegralType:
  byte
  short
  int
  long
  char
FloatingPointType:
  float
  double

ReferenceType:
  ClassOrInterfaceType
  ArrayType
ClassOrInterfaceType:
  ClassType
  InterfaceType
ClassType:
  TypeName
InterfaceType:
  TypeName
ArrayType:
  Type [ ]

PackageName:
  Identifier
  PackageName . Identifier
TypeName:
  Identifier
  PackageOrTypeName . Identifier
ExpressionName:
  Identifier
  AmbiguousName . Identifier
MethodName:
  Identifier
  AmbiguousName . Identifier
PackageOrTypeName:
  Identifier
  PackageOrTypeName . Identifier
AmbiguousName:
  Identifier
  AmbiguousName . Identifier

CompilationUnit:
  ImportDeclarations
  ImportDeclarations TypeDeclarations
  TypeDeclarations

  PackageDeclaration
  PackageDeclaration ImportDeclarations
  PackageDeclaration ImportDeclarations TypeDeclarations
  PackageDeclaration TypeDeclarations

ImportDeclarations:
  ImportDeclaration
  ImportDeclarations ImportDeclaration
TypeDeclarations:
  TypeDeclaration
  TypeDeclarations TypeDeclaration

PackageDeclaration:
  package PackageName ;

ImportDeclaration:
  SingleTypeImportDeclaration
  TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:
  import TypeName ;

TypeImportOnDemandDeclaration:
  import PackageOrTypeName . * ;

TypeDeclaration:
  ClassDeclaration
  InterfaceDeclaration
  ;

ClassDeclaration:
  Modifiers class Identifier Super Interfaces ClassBody
  Modifiers class Identifier Interfaces ClassBody
  Modifiers class Identifier Super ClassBody
  Modifiers class Identifier ClassBody
  class Identifier Super Interfaces ClassBody
  class Identifier Interfaces ClassBody
  class Identifier Super ClassBody
  class Identifier ClassBody

Modifiers:
  Modifier
  Modifiers Modifier

Modifier:
  public
  protected
  private
  static
  abstract
  final
  native
  synchronized
  transient
  volatile
  strictfp

Super:
  extends ClassType

Interfaces:
  implements InterfaceTypeList

InterfaceTypeList:
  InterfaceType
  InterfaceTypeList , InterfaceType

ClassBody:
  { ClassBodyDeclarations }
  { }
ClassBodyDeclarations:
  ClassBodyDeclaration
  ClassBodyDeclarations ClassBodyDeclaration
ClassBodyDeclaration:
  ClassMemberDeclaration
  InstanceInitializer
  StaticInitializer
  ConstructorDeclaration
ClassMemberDeclaration:
  FieldDeclaration
  MethodDeclaration
  ClassDeclaration
  InterfaceDeclaration
  ;

FieldDeclaration:
  Modifiers Type VariableDeclarators ;
  Modifiers Type VariableDeclarators ;
VariableDeclarators:
  VariableDeclarator
  VariableDeclarators , VariableDeclarator
VariableDeclarator:
  VariableDeclaratorId
  VariableDeclaratorId = VariableInitializer
VariableDeclaratorId:
  Identifier
  VariableDeclaratorId [ ]
VariableInitializer:
  Expression
  ArrayInitializer

MethodDeclaration:
  MethodHeader MethodBody

MethodHeader:
  Modifiers ResultType MethodDeclarator Throws
  Modifiers ResultType MethodDeclarator
  ResultType MethodDeclarator Throws
  ResultType MethodDeclarator

ResultType:
  Type
  void

MethodDeclarator:
  Identifer ( FormalParameterList )
  Identifer ( )

FormalParameterList:
  FormalParameter
  FormalParameterList , FormalParameter

FormalParameter:
  final Type VariableDeclaratorId
  Type VariableDeclaratorId

VariableDeclaratorId:
  Identifier
  VariableDeclaratorId [ ]

Throws:
  throws ClassTypeList
ClassTypeList:
  ClassType
  ClassTypeList , ClassType

MethodBody:
  Block
  ;

InstanceInitializer:
  Block
StaticInitializer:
  static Block

ConstructorDeclaration:
  Modifiers ConstructorDeclarator Throws ConstructorBody
  Modifiers ConstructorDeclarator ConstructorBody
  ConstructorDeclarator Throws ConstructorBody
  ConstructorDeclarator ConstructorBody
ConstructorDeclarator:
  SimpleTypeName ( FormalParameterList )
  SimpleTypeName ( )

ConstructorBody:
  { ExplicitConstructorInvocation BlockStatements }
  { BlockStatements }
  { ExplicitConstructorInvocation }
  { }

ExplicitConstructorInvocation:
  this ( ArgumentList ) ;
  this ( ) ;
  super ( ArgumentList ) ; InterfaceDeclaration
  super ( ) ;
  Primary . super ( ArgumentList ) ;
  Primary . super ( ) ;

InterfaceDeclaration:
  Modifiers interface Identifier ExtendsInterfaces InterfaceBody
  interface Identifier ExtendsInterfaces InterfaceBody
  Modifiers interface Identifier InterfaceBody
  interface Identifier InterfaceBody

ExtendsInterfaces:
  extends InterfaceType
  ExtendsInterfaces , InterfaceType

InterfaceBody:
  { InterfaceMemberDeclarations }
  { }

InterfaceMemberDeclarations:
  InterfaceMemberDeclaration
  InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration:
  ConstantDeclaration
  AbstractMethodDeclaration
  ClassDeclaration
  InterfaceDeclaration
  ;

ConstantDeclaration:
  Modifiers Type VariableDeclarators
  Type VariableDeclarators

AbstractMethodDeclaration:
  Modifiers ResultType MethodDeclarator Throws ;
  ResultType MethodDeclarator Throws ;
  Modifiers ResultType MethodDeclarator ;
  ResultType MethodDeclarator ;

ArrayInitializer:
  { VariableInitializers , }
  { VariableInitializers }
  { , }
  { }

VariableInitializers:
  VariableInitializer
  VariableInitializers , VariableInitializer

VariableInitializer:
  Expression
  ArrayInitializer

Block:
  { BlockStatements }
  { }
BlockStatements:
  BlockStatement
  BlockStatements BlockStatement
BlockStatement:
  LocalVariableDeclarationStatement
  ClassDeclaration
  Statement

LocalVariableDeclarationStatement:
  LocalVariableDeclaration ;
LocalVariableDeclaration:
  final Type VariableDeclarators
  Type VariableDeclarators

VariableDeclarators:
  VariableDeclarator
  VariableDeclarators , VariableDeclarator
VariableDeclarator:
  VariableDeclaratorId
  VariableDeclaratorId = VariableInitializer
VariableDeclaratorId:
  Identifier
  VariableDeclaratorId [ ]
VariableInitializer:
  Expression
  ArrayInitializer

Statement:
  StatementWithoutTrailingSubstatement
  LabeledStatement
  IfThenStatement
  IfThenElseStatement
  WhileStatement
  ForStatement

StatementWithoutTrailingSubstatement:
  Block
  EmptyStatement
  ExpressionStatement
  SwitchStatement
  DoStatement
  BreakStatement
  ContinueStatement
  ReturnStatement
  SynchronizedStatement
  ThrowStatement
  TryStatement

StatementNoShortIf:
  StatementWithoutTrailingSubstatement
  LabeledStatementNoShortIf
  IfThenElseStatementNoShortIf
  WhileStatementNoShortIf
  ForStatementNoShortIf

IfThenStatement:
  if ( Expression ) Statement
IfThenElseStatement:
  if ( Expression ) StatementNoShortIf else Statement
IfThenElseStatementNoShortIf:
  if ( Expression ) StatementNoShortIf else StatementNoShortIf

EmptyStatement:
  ;
LabeledStatement:
  Identifier : Statement
LabeledStatementNoShortIf:
  Identifier : StatementNoShortIf
ExpressionStatement:
  StatementExpression ;
StatementExpression:
  Assignment
  PreIncrementExpression
  PreDecrementExpression
  PostIncrementExpression
  PostDecrementExpression
  MethodInvocation
  ClassInstanceCreationExpression

SwitchStatement:
  switch ( Expression ) SwitchBlock
SwitchBlock:
  { SwitchBlockStatementGroups SwitchLabels }
  { SwitchBlockStatementGroups }
  { SwitchLabels }
  { }
SwitchBlockStatementGroups:
  SwitchBlockStatementGroup
  SwitchBlockStatementGroups SwitchBlockStatementGroup
SwitchBlockStatementGroup:
  SwitchLabels BlockStatements
SwitchLabels:
  SwitchLabel
  SwitchLabels SwitchLabel
SwitchLabel:
  case ConstantExpression :
  default :

WhileStatement:
  while ( Expression ) Statement
WhileStatementNoShortIf:
  while ( Expression ) StatementNoShortIf

DoStatement:
  do Statement while ( Expression ) ;

ForStatement:
  for ( ForInit ; Expression ; ForUpdate ) Statement
  for ( ForInit ; Expression ; ) Statement
  for ( ForInit ; ; ForUpdate ) Statement
  for ( ForInit ; ; ) Statement
  for ( ; Expression ; ForUpdate ) Statement
  for ( ; Expression ; ForUpdate ) Statement
  for ( ; ; ForUpdate ) Statement
  for ( ; ; ) Statement

ForStatementNoShortIf:
  for ( ForInit ; Expression ; ForUpdate ) StatementNoShortIf
  for ( ForInit ; Expression ; ) StatementNoShortIf
  for ( ForInit ; ; ForUpdate ) StatementNoShortIf
  for ( ForInit ; ; ) StatementNoShortIf
  for ( ; Expression ; ForUpdate ) StatementNoShortIf
  for ( ; Expression ; ForUpdate ) StatementNoShortIf
  for ( ; ; ForUpdate ) StatementNoShortIf
  for ( ; ; ) StatementNoShortIf

ForInit:
  StatementExpressionList
  LocalVariableDeclaration

ForUpdate:
  StatementExpressionList

StatementExpressionList:
  StatementExpression
  StatementExpressionList , StatementExpression

BreakStatement:
  break Identifier ;
  break ;

ContinueStatement:
  continue Identifier ;
  continue Identifier ;

ReturnStatement:
  return Expression ;
  return Expression ;

ThrowStatement:
  throw Expression ;

SynchronizedStatement:
  synchronized ( Expression ) Block
TryStatement:
  try Block Catches
  try Block Catches Finally
  try Block Finally

Catches:
  CatchClause
  Catches CatchClause

CatchClause:
  catch ( FormalParameter ) Block

Finally:
  finally Block

Primary:
  PrimaryNoNewArray
  ArrayCreationExpression

PrimaryNoNewArray:
  Literal
  Type . class
  void . class
  this
  ClassName . this
  ( Expression )
  ClassInstanceCreationExpression
  FieldAccess
  MethodInvocation
  ArrayAccess

ClassInstanceCreationExpression:
  new ClassOrInterfaceType ( ArgumentList ) ClassBody
  new ClassOrInterfaceType ( ArgumentList )
  new ClassOrInterfaceType ( ) ClassBody
  new ClassOrInterfaceType ( )
  Primary . new Identifier ( ArgumentList ) ClassBody
  Primary . new Identifier ( ArgumentList )
  Primary . new Identifier ( ) ClassBody
  Primary . new Identifier ( )

ArgumentList:
  Expression
  ArgumentList , Expression

ArrayCreationExpression:
  new PrimitiveType DimExprs Dims
  new PrimitiveType DimExprs
  new TypeName DimExprs Dims
  new TypeName DimExprs
  new PrimitiveType Dims ArrayInitializer
  new TypeName Dims ArrayInitializer
DimExprs:
  DimExpr
  DimExprs DimExpr
DimExpr:
  [ Expression ]
Dims:
  [ ]
  Dims [ ]

FieldAccess:
  Primary . Identifier
  super . Identifier
  ClassName . super . Identifier

MethodInvocation:
  MethodName ( ArgumentList )
  MethodName ( )
  Primary . Identifier ( ArgumentList )
  Primary . Identifier ( )
  super . Identifier ( ArgumentList )
  super . Identifier ( )
  ClassName . super . Identifier ( ArgumentList )
  ClassName . super . Identifier ( )

ArrayAccess:
  ExpressionName [ Expression ]
  PrimaryNoNewArray [ Expression ]

PostfixExpression:
  Primary
  ExpressionName
  PostIncrementExpression
  PostDecrementExpression

PostIncrementExpression:
  PostfixExpression ++

PostDecrementExpression:
  PostfixExpression --

UnaryExpression:
  PreIncrementExpression
  PreDecrementExpression
  + UnaryExpression
  - UnaryExpression
  UnaryExpressionNotPlusMinus
PreIncrementExpression:
  ++ UnaryExpression
PreDecrementExpression:
  -- UnaryExpression
UnaryExpressionNotPlusMinus:
  PostfixExpression
  ~ UnaryExpression
  ! UnaryExpression
  CastExpression

CastExpression:
  ( PrimitiveType Dims ) UnaryExpression
  ( PrimitiveType ) UnaryExpression
  ( ReferenceType ) UnaryExpressionNotPlusMinus

MultiplicativeExpression:
  UnaryExpression
  MultiplicativeExpression * UnaryExpression
  MultiplicativeExpression / UnaryExpression
  MultiplicativeExpression % UnaryExpression
AdditiveExpression:
  MultiplicativeExpression
  AdditiveExpression + MultiplicativeExpression
  AdditiveExpression - MultiplicativeExpression
ShiftExpression:
  AdditiveExpression
  ShiftExpression << AdditiveExpression
  ShiftExpression >> AdditiveExpression
  ShiftExpression >>> AdditiveExpression
RelationalExpression:
  ShiftExpression
  RelationalExpression < ShiftExpression
  RelationalExpression > ShiftExpression
  RelationalExpression <= ShiftExpression
  RelationalExpression >= ShiftExpression
  RelationalExpression instanceof ReferenceType

EqualityExpression:
  RelationalExpression
  EqualityExpression == RelationalExpression
  EqualityExpression != RelationalExpression
AndExpression:
  EqualityExpression
  AndExpression & EqualityExpression
ExclusiveOrExpression:
  AndExpression
  ExclusiveOrExpression ^ AndExpression
InclusiveOrExpression:
  ExclusiveOrExpression
  InclusiveOrExpression | ExclusiveOrExpression

ConditionalAndExpression:
  InclusiveOrExpression
  ConditionalAndExpression && InclusiveOrExpression
ConditionalOrExpression:
  ConditionalAndExpression
  ConditionalOrExpression || ConditionalAndExpression
ConditionalExpression:
  ConditionalOrExpression
  ConditionalOrExpression ? Expression : ConditionalExpression

AssignmentExpression:
  ConditionalExpression
  Assignment
Assignment:
  LeftHandSide AssignmentOperator AssignmentExpression
LeftHandSide:
  ExpressionName
  FieldAccess
  ArrayAccess
AssignmentOperator:
  =
  *=
  /=
  %=
  +=
  -=
  <<=
  >>=
  >>>=
  &=
  ^=
  |=

Expression:
  AssignmentExpression

ConstantExpression:
  Expression

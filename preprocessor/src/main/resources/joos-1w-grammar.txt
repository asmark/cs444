Goal:

  bof CompilationUnit eof

Literal:

  IntegerLiteral

  BooleanLiteral

  CharacterLiteral

  StringLiteral

  NullLiteral

IntegerLiteral:

  DecimalIntLiteral

BooleanLiteral:

  True

  False

Type:

  PrimitiveType

  ReferenceType

PrimitiveType:

  NumericType

  boolean

NumericType:

  IntegralType

IntegralType:
  byte
  short
  int
  char

ReferenceType:

  ClassOrInterfaceType

  ArrayType

ClassOrInterfaceType:

  Name

ClassType:

  ClassOrInterfaceType

InterfaceType:

  ClassOrInterfaceType

ArrayType:

  PrimitiveType [ ]

  Name [ ]

Name:

  SimpleName

  QualifiedName

SimpleName:

  Identifier

QualifiedName:

  Name . Identifier

CompilationUnit:

  PackageDeclarationopt ImportDeclarationsopt TypeDeclarationopt

ImportDeclarations:

  ImportDeclaration

  ImportDeclarations ImportDeclaration

PackageDeclaration:

  package Name ;

ImportDeclaration:

  SingleTypeImportDeclaration

  TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:

  import Name ;

TypeImportOnDemandDeclaration:

  import Name . * ;

TypeDeclaration:

  ClassDeclaration

  InterfaceDeclaration

  ;

Modifiers:

  Modifier

  Modifiers Modifier

Modifier:
  public
  protected
  static
  abstract
  final
  native

ClassDeclaration:

  Modifiers class Identifier SuperClauseopt Interfacesopt ClassBody

SuperClause:

  extends ClassType

Interfaces:

  implements InterfaceTypeList

InterfaceTypeList:

  InterfaceType

  InterfaceTypeList , InterfaceType

ClassBody:

  { ClassBodyDeclarationsopt }

ClassBodyDeclarations:

  ClassBodyDeclaration

  ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration:

  ClassMemberDeclaration

  ConstructorDeclaration

ClassMemberDeclaration:

  FieldDeclaration

  MethodDeclaration

FieldDeclaration:

  Modifiers Type VariableDeclarator ;

VariableDeclarator:

  VariableDeclaratorId

  VariableDeclaratorId = VariableInitializer

VariableDeclaratorId:

  Identifier

VariableInitializer:

  Expression

MethodDeclaration:

  MethodHeader MethodBody

MethodHeader:

  Modifiers Type MethodDeclarator

  Modifiers void MethodDeclarator

MethodDeclarator:

  Identifier ( FormalParameterListopt )

FormalParameterList:

  FormalParameter

  FormalParameterList , FormalParameter

FormalParameter:

  Type VariableDeclaratorId

ClassTypeList:

  ClassType

  ClassTypeList , ClassType

MethodBody:

  Block

  ;

ConstructorDeclaration:

  Modifiers ConstructorDeclarator ConstructorBody

ConstructorDeclarator:

  SimpleName ( FormalParameterListopt )

ConstructorBody:

  { BlockStatementsopt }

InterfaceDeclaration:

  Modifiers interface Identifier ExtendsInterfacesopt InterfaceBody

ExtendsInterfaces:

  extends InterfaceType

  ExtendsInterfaces , InterfaceType

InterfaceBody:

  { InterfaceMemberDeclarationsopt }

InterfaceMemberDeclarations:

  AbstractMethodDeclaration

  InterfaceMemberDeclarations AbstractMethodDeclaration

AbstractMethodDeclaration:

  MethodHeader ;

VariableInitializers:

  VariableInitializer

  VariableInitializers , VariableInitializer

Block:

  { BlockStatementsopt }

BlockStatements:

  BlockStatement

  BlockStatements BlockStatement

BlockStatement:

  LocalVariableDeclarationStatement

  Statement

LocalVariableDeclarationStatement:

  LocalVariableDeclaration ;

LocalVariableDeclaration:

  Type VariableDeclarator

Statement:

  StatementWithoutTrailingSubstatement

  IfThenStatement

  IfThenElseStatement

  WhileStatement

  ForStatement

StatementNoShortIf:

  StatementWithoutTrailingSubstatement

  IfThenElseStatementNoShortIf

  WhileStatementNoShortIf

  ForStatementNoShortIf

StatementWithoutTrailingSubstatement:

  Block

  EmptyStatement

  ExpressionStatement

  ReturnStatement

EmptyStatement:

  ;

ExpressionStatement:

  StatementExpression ;

StatementExpression:

  Assignment

  PreIncrementExpression

  PreDecrementExpression

  PostIncrementExpression

  PostDecrementExpression

  MethodInvocation

  ClassInstanceCreationExpression

IfThenStatement:

  if ( Expression ) Statement

IfThenElseStatement:

  if ( Expression ) StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:

  if ( Expression ) StatementNoShortIf else StatementNoShortIf

WhileStatement:

  while ( Expression ) Statement

WhileStatementNoShortIf:

  while ( Expression ) StatementNoShortIf

ForStatement:

  for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement

ForStatementNoShortIf:

  for ( ForInitopt ; Expressionopt ; ForUpdateopt ) StatementNoShortIf

ForInit:

  StatementExpression

  LocalVariableDeclaration

ForUpdate:

  StatementExpression

ReturnStatement:

  return Expressionopt ;

Primary:

  PrimaryNoNewArray

  ArrayCreationExpression

PrimaryNoNewArray:

  Literal

  this

  ( Expression )

  ClassInstanceCreationExpression

  FieldAccess

  MethodInvocation

  ArrayAccess

ClassInstanceCreationExpression:

  new ClassType ( ArgumentListopt )

ArgumentList:

  Expression

  ArgumentList , Expression

ArrayCreationExpression:

  new PrimitiveType DimExpr

  new ClassOrInterfaceType DimExpr

DimExpr:

  Dims

  [ Expression ]

Dims:

  [ ]

FieldAccess:

  Primary . Identifier

MethodInvocation:

  Name ( ArgumentListopt )

  Primary . Identifier ( ArgumentListopt )

ArrayAccess:

  Name [ Expression ]

  PrimaryNoNewArray [ Expression ]

PostfixExpression:

  Primary

  Name

UnaryExpression:

  - UnaryExpression

  UnaryExpressionNotPlusMinus

UnaryExpressionNotPlusMinus:

  PostfixExpression

  ! UnaryExpression

  CastExpression

CastExpression:

  ( PrimitiveType Dimsopt ) UnaryExpression

  ( Expression ) UnaryExpressionNotPlusMinus

  ( Name Dims ) UnaryExpressionNotPlusMinus

MultiplicativeExpression:

  UnaryExpression

  MultiplicativeExpression * UnaryExpression

  MultiplicativeExpression / UnaryExpression

  MultiplicativeExpression % UnaryExpression

AdditiveExpression:

  MultiplicativeExpression

  AdditiveExpression + MultiplicativeExpression

  AdditiveExpression - MultiplicativeExpression

RelationalExpression:

  AdditiveExpression

  RelationalExpression < AdditiveExpression

  RelationalExpression > AdditiveExpression

  RelationalExpression <= AdditiveExpression

  RelationalExpression >= AdditiveExpression

  RelationalExpression instanceof ReferenceType

EqualityExpression:

  RelationalExpression

  EqualityExpression == RelationalExpression

  EqualityExpression != RelationalExpression

AndExpression:

  EqualityExpression

  AndExpression & EqualityExpression

ExclusiveOrExpression:

  AndExpression

  ExclusiveOrExpression ^ AndExpression

InclusiveOrExpression:

  ExclusiveOrExpression

  InclusiveOrExpression | ExclusiveOrExpression

ConditionalAndExpression:

  InclusiveOrExpression

  ConditionalAndExpression && InclusiveOrExpression

ConditionalOrExpression:

  ConditionalAndExpression

  ConditionalOrExpression || ConditionalAndExpression

ConditionalExpression:

  ConditionalOrExpression

AssignmentExpression:

  ConditionalExpression

  Assignment

Assignment:

  LeftHandSide = AssignmentExpression

LeftHandSide:

  Name

  FieldAccess

  ArrayAccess

Expression:

  AssignmentExpression

ConstantExpression:

  Expression

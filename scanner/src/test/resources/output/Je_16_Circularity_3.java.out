EolCommentPrefix //
Id JOOS1
Colon :
Id PARSER_WEEDER
Comma ,
Id JOOS1_THIS_CALL
Comma ,
Id PARSER_EXCEPTION
EolCommentPrefix //
Id JOOS2
Colon :
Id TYPE_CHECKING
Comma ,
Id CIRCULAR_CONSTRUCTOR_INVOCATION
EolCommentPrefix //
Id JAVAC
Colon :
Id UNKNOWN
TraditionalCommentPrefix /*
Multiply *
Multiply *
Id Parser
Divide /
Id weeder
Colon :
Multiply *
Minus -
LeftParen (
Id Joos
DecimalInteger 1
RightParen )
Id No
Id explicit
Super super
Id or
This this
Id statements
Id allowed
Multiply *
Id Typecheck
Colon :
Multiply *
Minus -
LeftParen (
Id Joos
DecimalInteger 2
RightParen )
Id Check
Id that
Id constructors
Id are
Id not
Id invoking
Id each
Id other
Multiply *
Id circularly
Id using
Id explicit
This this
Id constructor
Id invocation
Id statements
Dot .
TraditionalCommentPostfix */
Public public
Class class
Id Je_16_Circularity_3
LeftBrace {
Public public
Id Je_16_Circularity_3
LeftParen (
Int int
Id i
Comma ,
Id String
Id s
RightParen )
LeftBrace {
This this
LeftParen (
DecimalInteger 100
Comma ,
String "foo"
RightParen )
SemiColon ;
RightBrace }
Public public
Static static
Int int
Id test
LeftParen (
RightParen )
LeftBrace {
Return return
DecimalInteger 123
SemiColon ;
RightBrace }
RightBrace }
